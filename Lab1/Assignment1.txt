# Εργαστήριο ΛΣ 1 / Άσκηση 1 / 2024-25
# Ονοματεπώνυμο: Ρόμπερτ Πολοβίνα
# ΑΜ: 23390338
#
# Ερώτηση 1.
# Δημιουργήστε στον τρέχοντα κατάλογο το αρχείο 'ask1.txt' με τα ακόλουθα περιεχόμενα (όνομα, επώνυμο,
# username, ΤΚ, περιοχή, τηλ.), και εμφανίστε το στη συνέχεια στην οθόνη, με αριθμημένες τις γραμμές του.
# George Pappas george2 12136 Peristeri -------
# Nick Nikolaoy nick23 12232 Aigaleo 5314555
# George Georgioy george583 11132 Athens -------
# Helen Georgioy helen3 12136 Peristeri 5748456
# Nick Pappas nick4 11223 Aigaleo 5324123
# Helen Ioannoy helen367 13222 Athens -------
# Helen Thanoy helen36 11132 Peristeri 9718345
# Vasilis Mamalis vas32 12345 Dafni 9738383
#
# Απάντηση: Για την δημιουργία του αρχείου 'ask1.txt' θα χρησιμοποιούσα την εντολή 'touch', δηλαδή 'touch ask1.txt'
# και για την επεξεργασία του αρχείου κειμένου την εντολή 'nano ask1.txt',
# η οποία ανοίγει έναν text editor και θα έκανα επικόλληση τα δεδομένα της εκφώνησης.
#
#touch ask1.txt
#nano ask1.txt
#cat -n ask1.txt
#
# Λόγω των οδηγιών της εργασίας (τα πάντα σε σχόλια με το '#' εκτός από τις εντολές), υποθέτω ότι οι εργασίες θα περάσουν
# από κάποιο πρόγραμμα. Συνεπώς για να μην διακόψω την ροή του, θα εισάγω τα δεδομένα στο αρχείο απευθείας
# με τον παρακάτω τρόπο:
#
# Θα χρησιμοποιήσω την εντολή 'echo' και το όρισμα '-e'.
# Η 'echo' εμφανίζει αυτό που της γράφουμε στην οθόνη. Με τον
# χαρακτήρα '>' όμως ανακατευθήνουμε την έξοδο της σε ένα αρχείο.
# Το όρισμα '-e' θα μας επιτρέψει να χρησιμοποιήσουμε τον χαρακτήρα '\n' για την αλλαγή γραμμής.
# Άρα η εντολή θα είναι 'echo -e "George Pappas george2 12136 Peristeri -------\nNick[....]" > ask1.txt'.
#
# Έπειτα για να εμφανίσω αριθμημένα τα περιεχόμενα του αρχείου θα χρησιμοποιήσω την εντολή 'cat'
# με το όρισμα '-n', ως εξής: 'cat -n ask1.txt'.
# Η 'cat' μας εμφανίζει το περιεχόμενο ενός αρχείου κειμένου και το όρισμα'-n' εμφανίζει τις γραμμές
# αριθμημένες.
# Αναγκαστικά στην σειρά της εντολής θα υπάρξει αναδίπλωση κειμένου...
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# 1  George Pappas george2 12136 Peristeri -------
# 2  Nick Nikolaoy nick23 12232 Aigaleo 5314555
# 3  George Georgioy george583 11132 Athens -------
# 4  Helen Georgioy helen3 12136 Peristeri 5748456
# 5  Nick Pappas nick4 11223 Aigaleo 5324123
# 6  Helen Ioannoy helen367 13222 Athens -------
# 7  Helen Thanoy helen36 11132 Peristeri 9718345	 
# 8  Vasilis Mamalis vas32 12345 Dafni 9738383
#
echo -e "George Pappas george2 12136 Peristeri -------\nNick Nikolaoy nick23 12232 Aigaleo 5314555\nGeorge Georgioy george583 11132 Athens -------\n
Helen Georgioy helen3 12136 Peristeri 5748456\nNick Pappas nick4 11223 Aigaleo 5324123\nHelen Ioannoy helen367 13222 Athens -------\n
Helen Thanoy helen36 11132 Peristeri 9718345\nVasilis Mamalis vas32 12345 Dafni 9738383" > ask1.txt
cat -n ask1.txt
#
# Ερώτηση 2.
# Τρέξτε την εντολή cal -3 > calfile.txt και εξηγείστε τι ακριβώς κάνει.
#
# Απάντηση: Η εντολή 'cal' εμφανίζει στην οθόνη το ημερολόγιο του τρέχοντος μηνα.
# Με το όρισμα '-3' εμφανίζουμε επίσης και τον προηγούμενο και επόμενο μήνα.
# Με το '> calfile.txt' δημιουργείται το αρχείο 'calfile.txt' και αντί για την οθόνη
# προωθείται μέσω του '>' η έξοδος της εντολής 'cal -3' στο αρχείο.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
#                               2024
#       October               November              December
# Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
#        1  2  3  4  5                  1  2   1  2  3  4  5  6  7
#  6  7  8  9 10 11 12   3  4  5  6  7  8  9   8  9 10 11 12 13 14
# 13 14 15 16 17 18 19  10 11 12 13 14 15 16  15 16 17 18 19 20 21
# 20 21 22 23 24 25 26  17 18 19 20 21 22 23  22 23 24 25 26 27 28
# 27 28 29 30 31        24 25 26 27 28 29 30  29 30 31
#
cal -3 > calfile.txt
cat calfile.txt
#
# Ερώτηση 3.
# Συνενώστε τα αρχεία calfile.txt και ask1.txt σε ένα αρχείο με όνομα full.txt
#
# Απάντηση: Για να εκτελέσουμε αυτή την λειτουργία θα χρησιμοποιήσουμε την εντολή 'cat ask1.txt calfile.txt > full.txt'.
# H εντολή 'cat' συνενώνει τα αρχεία που προσδιορίζουμε αμέσως μετά, και μέσω της '> full.txt' δημιουργείται το αρχείο 'full.txt'
# και αποθηκεύεται σε αυτό η έξοδος της 'cat'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# George Pappas george2 12136 Peristeri -------
# Nick Nikolaoy nick23 12232 Aigaleo 5314555
# George Georgioy george583 11132 Athens -------
# Helen Georgioy helen3 12136 Peristeri 5748456
# Nick Pappas nick4 11223 Aigaleo 5324123
# Helen Ioannoy helen367 13222 Athens -------
# Helen Thanoy helen36 11132 Peristeri 9718345
# Vasilis Mamalis vas32 12345 Dafni 9738383
#                              2024
#       October               November              December
# Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
#        1  2  3  4  5                  1  2   1  2  3  4  5  6  7
#  6  7  8  9 10 11 12   3  4  5  6  7  8  9   8  9 10 11 12 13 14
# 13 14 15 16 17 18 19  10 11 12 13 14 15 16  15 16 17 18 19 20 21
# 20 21 22 23 24 25 26  17 18 19 20 21 22 23  22 23 24 25 26 27 28
# 27 28 29 30 31        24 25 26 27 28 29 30  29 30 31
#
cat ask1.txt calfile.txt > full.txt
#
# Ερώτηση 4.
# Εμφανίστε στην οθόνη τα πέντε πιο πρόσφατα τροποποιημένα αρχεία του καταλόγου σας.
#
# Απάντηση: Θα χρησιμοποιήσουμε την εντολή 'ls -t | head -5'.
# Η εντολή 'ls' με όρισμα '-t' τυπώνει στην οθόνη το περιεχόμενο του καταλόγου ταξινομημένο
# κατά τον χρόνο επεξεργασίας του.
# Ο χαρακτήρας pipe '|' χρησιμοποιείται για να περάσει την έξοδο της πρώτης εντολής ως είσοδο στη δεύτερη.
# Με την '| head -5' η εντολή θα τυπώσει μέχρι 5 αρχεία. Θα μπορούσαμε επίσης να χρησιμοποιήσουμε και την '| tail -5',
# το αποτέλεσμα της εντολής δεν φαίνεται να αλλάζει.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# full.txt
# calfile.txt
# ask1.txt
#
ls -t | head -5
#
# Ερώτηση 5.
# Δημιουργήστε έναν κατάλογο με όνομα 'mydir1'. Μεταβείτε σε αυτόν και στη συνέχεια αντιγράψτε εκεί (χωρίς
# να αλλάξετε κατάλογο) το αρχείο 'full.txt' (από το γονικό κατάλογο). Μετονομάστε το εν συνεχεία σε 'new.txt'.
# Επιστρέψτε στο γονικό κατάλογο. Διαγράψτε τον κατάλογο 'mydir1' και τα περιεχόμενά του.
#
# Απάντηση: Για να δημιουργήσουμε τον νέο κατάλογο χρησιμοποιούμε την εντολή 'mkdir mydir1'.
# Θα μεταβούμε σε αυτόν με την 'cd mydir1'.
# Η εντολή 'mkdir' δημιουργεί έναν κατάλογο και με την 'cd' αλλάζουμε τον κατάλογο που βρισκόμαστε.
#	
# Για να εκτελέσουμε την αντιγραφή χωρίς να αλλάξουμε κατάλογο θα χρησιμοποιηθεί η εντολή 'cp ../full.txt ./'.
# Η εντολή 'cp' εκτελεί την αντιγραφή (copy).
# Το '../' δείχνει στο parent directory όπου περιέχεται το αρχείο 'full.txt' που θέλουμε να αντιγράψουμε.
# Το './' δείχνει στον τρέχοντα κατάλογο (mydir1) και είναι το όρισμα που δηλώνει τον προορισμό της αντιγραφής.
# Στην θέση του './', θα μπορούσαμε να χρησιμοποιήσουμε και το όνομα του καταλόγου 'mydir1'.
#
# Μετονομάζουμε το αρχείο μας σε 'new.txt' μέσω της εντολής 'mv full.txt new.txt'.
# Επιστρέφουμε στον γονικό κατάλογο με την εντολή 'cd ..'
# Διαγράφουμε τον κατάλογο με την εντολή 'rm -r mydir1'
# Με το όρισμα '-r' διαγράφουμε και όλα τα περιεχόμενα του καταλόγου.
#
mkdir mydir1
cd mydir
cp ../full.txt ./
mv full.txt new.txt
cd ..
rm -r mydir1
#	
# Ερώτηση 6.
# Δώστε τις εντολές που θα εμφανίσουν: (α) όλα τα αρχεία του καταλόγου /usr με πληροφορίες για το inode
# τους και το μέγεθος τους σε blocks. (β) όλα τα περιεχόμενα του δέντρου καταλόγων και υποκαταλόγων
# (αναδρομικά) που βρίσκονται κάτω από τον κατάλογο /usr, με πλήρεις πληροφορίες για κάθε ένα από αυτά
# και εμφανιζόμενα σταδιακά, σελίδα προς σελίδα.
#
# Απάντηση: (α) Θα χρησιμοποιήσουμε την εντολή 'ls -lsai /usr'
# Πιο αναλυτικά το όρισμα '-l' εμφανίζει τις πληροφορίες σε αναλυτική μορφή.
# Το '-s' εμφανίζει το μέγεθος σε blocks.
# Το '-a' εμφανίζει και τα κρυφά αρχεία.
# Το '-i' εμφανίζει τις πληροφορίες για το inode.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# total 84
# 73730  4 drwxr-xr-x  12 root root  4096 Sep 27 23:13 .
#     2  4 drwxr-xr-x  22 root root  4096 Nov 12 17:02 ..
#  1425 32 drwxr-xr-x   2 root root 32768 Oct 28 19:48 bin
#  2231  4 drwxr-xr-x   2 root root  4096 Apr 22  2024 games
#  2232  4 drwxr-xr-x   4 root root  4096 Sep 27 23:14 include
#  2238  4 drwxr-xr-x  55 root root  4096 Oct 28 19:02 lib
# 14470  4 drwxr-xr-x   2 root root  4096 Sep 27 23:13 lib64
# 14472  4 drwxr-xr-x   7 root root  4096 Sep 27 23:14 libexec
# 14505  4 drwxr-xr-x  10 root root  4096 Sep 27 23:13 local
# 14531 12 drwxr-xr-x   2 root root 12288 Oct 28 19:04 sbin
# 14723  4 drwxr-xr-x 108 root root  4096 Sep 27 23:14 share
# 46383  4 drwxr-xr-x   2 root root  4096 Apr 22  2024 src
#
ls -lsai /usr
#
# (β) Θα χρησιμοποιήσουμε την εντολή 'ls -lR /usr | less'
# Το '-l' εμφανίζει αναλυτικά τα περιεχόμενα του καταλόγου, όπως και παραπάνω.
# Το '-R' εμφανίζει τα περιεχόμενα του '/usr' και των υποκαταλόγων του αναδρομικά (Recursive).
# To pipe '|' θα περάσει το αποτέλεσμα στην επόμενη εντολή.
# Η εντολή 'less' εμφανίζει τα δεδομένα αυτά σελίδα προς σελίδα.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# /usr:
# total 76
# drwxr-xr-x   2 root root  4096 Sep 27 23:13 lib64
# drwxr-xr-x   7 root root  4096 Sep 27 23:14 libexec
# drwxr-xr-x  10 root root  4096 Sep 27 23:13 local
# drwxr-xr-x   2 root root 12288 Oct 28 19:04 sbin
# drwxr-xr-x 108 root root  4096 Sep 27 23:14 share
# drwxr-xr-x   2 root root  4096 Apr 22  2024 src
#
# /usr/bin:
# total 97424
# lrwxrwxrwx 1 root root           4 Feb 10  2024 NF -> col1
# lrwxrwxrwx 1 root root           1 Apr  8  2024 X11 -> .
# -rwxr-xr-x 1 root root       55744 Apr  5  2024 [
# -rwxr-xr-x 1 root root       18744 Jul 18 21:28 aa-enabled
# -rwxr-xr-x 1 root root       18744 Jul 18 21:28 aa-exec
# -rwxr-xr-x 1 root root       18736 Jul 18 21:28 aa-features-abi
# -rwxr-xr-x 1 root root       76975 Jun 15  2023 ack
# -rwxr-xr-x 1 root root       16422 Apr 18  2024 add-apt-repository
# -rwxr-xr-x 1 root root       14720 Aug  9 05:33 addpart
# lrwxrwxrwx 1 root root          26 Aug  7 13:15 addr2line -> x86_64-linux-gnu-addr2line
# -rwxr-xr-x 1 root root        2322 Apr 18  2024 apport-bug
# -rwxr-xr-x 1 root root       13625 Jul 22 17:59 apport-cli
# lrwxrwxrwx 1 root root          10 Jul 22 17:59 apport-collect -> apport-bug
# -rwxr-xr-x 1 root root        3790 Jul 22 17:59 apport-unpack
# -rwxr-xr-x 1 root root      141544 Apr  8  2024 appstreamcli
# lrwxrwxrwx 1 root root           6 Apr  8  2024 apropos -> whatis
# -rwxr-xr-x 1 root root       18824 Mar 31  2024 apt
# lrwxrwxrwx 1 root root          18 Apr 18  2024 apt-add-repository -> add-apt-repository
# -rwxr-xr-x 1 root root       88544 Mar 31  2024 apt-cache
# [...]
#
ls -lR /usr | less
#
# Ερώτηση 7.
# Δημιουργήστε έναν κατάλογο με όνομα 'testdir1'. Μεταβείτε σε αυτόν και φτιάξτε εκεί ένα hard link (με το
# όνομα 'ask1link') προς το αρχείο 'ask1.txt' του γονικού καταλόγου. Βεβαιωθείτε (δίνοντας την κατάλληλη
# εντολή και εξηγώντας τι βλέπετε) ότι έχει δημιουργηθεί και ότι δεν είναι symbolic (soft) link.
#
# Απάντηση: Δημιουργούμε τον κατάλογο με την εντολή 'mkdir testdir1' και μεταβαίνουμε με την 'cd testdir1'.
# Δημιουργούμε το hard link με την εντολή 'ln ../ask1.txt ask1link'.
# Η εντολή 'ln' χρησιμοποιείται για την δημιουργία links.
# Ορίζουμε την διαδρομή του αρχικού αρχείου μέσω του '../ask1.txt' και το όνομα του συνδέσμου ως 'ask1link'.
#
# Η εντολή 'ln', σύμφωνα με την περιγραφή της (man ln), δημιουργεί hard links by default.
# Για να το επαληθεύσουμε θα χρησιμοποιήσουμε την εντολή 'ls -i ask1link ../ask1.txt'
# όπου το '-i' εμφανίζει το inode.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# 3452 ../ask1.txt  3452 ask1link
#
# Βλέπουμε ότι το inode είναι το ίδιο (3452) συνεπώς τα δύο αρχεία δείχνουν στο ίδιο σημείο του δίσκου,
# άρα πρόκειται για hard link.
#
mkdir testdir1
cd testdir1
ln ../ask1.txt ask1link
ls -i ask1link ../ask1.txt
cd ..
#
# Ερώτηση 8.
# Δημιουργήστε ένα κατάλογο kat1 και μέσα σε αυτόν δύο αρχεία, file1 και file2, με περιεχόμενο τη λέξη 'one' το
# ένα και τη λέξη 'two' το άλλο. Τρέξτε (μέσα στον κατάλογο kat1) την εντολή 'cp *' και εξηγήστε το αποτέλεσμα.
# Στη συνέχεια τρέξτε την εντολή 'mv *' και εξηγήστε το αποτέλεσμα.
#
# Απάντηση: Δημιουργούμε τον κατάλογο με την 'mkdir kat1' και μεταβαίνουμε με την 'cd kat1'
# Δημιουργούμε τα αρχεία file1 και file2 με το περιεχόμενο 'one' και 'two' αντίστοιχα
# με τις εντολες 'echo "one" > file1' και 'echo "two" > file2'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# Τρέχοντας την εντολή 'cp *' το λειτουργικό προσπαθεί να αντιγράψει όλα τα αρχεία του καταλόγου.
# Επειδή όμως δεν έχει οριστεί προορισμός, η εντολή λειτουργεί απρόβλεπτα και το αποτέλεσμα της είναι να αντιγραφούν
# τα περιεχόμενα του file1 στο file2.
# Αυτό το βλέπουμε με χρήση των εντολών 'cat file1' & 'cat file2'.
# Και για την εντολή 'mv *' ισχύει η ίδια απρόβλεπτη λειτουργία για τον ίδιο λόγο.
# Με την εντολή 'ls' βλέπουμε ότι το file1 δεν υπάρχει πια.
#
mkdir kat1
cd kat1
echo "one" > file1
echo "two" > file2
cp *
cat file1
cat file2
mv *
ls
cd ..
#
# Ερώτηση 9.
# Εμφανίστε τις γραμμές του αρχείου 'ask1.txt' οι οποίες τελειώνουν με ένα ή περισσότερα συνεχόμενα ψηφία.
#
# Απάντηση: Η εντολή 'grep' αναζητά ένα πρότυπο χαρακτήρων μέσα σε ένα αρχείο και επιστρέφει τις γραμμές που το περιέχουν.
# Θα την συνοδέψουμε με τα παρακάτω atoms & άγκυρες:
# '[0-9]': Αντιπροσωπέυει ένα ψηφίο από 0 έως 9 (δηλαδή όλα).
# '\+': Συμβολίζει την παρουσία ενός ή παραπάνω ψηφίων.
# '$': Δηλώνει το τέλος της γραμμής.
# Συνεπώς η εντολή είναι η "grep '[0-9]\+$' ask1.txt".
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# Nick Nikolaoy nick23 12232 Aigaleo 5314555
# Helen Georgioy helen3 12136 Peristeri 5748456
# Nick Pappas nick4 11223 Aigaleo 5324123
# Helen Thanoy helen36 11132 Peristeri 9718345
# Vasilis Mamalis vas32 12345 Dafni 9738383
#	
# Βλέπουμε ότι από το αρχείο 'ask1.txt' δεν έχουν τυπωθεί οι γραμμές που στο τέλος τους δεν έχουν αριθμούς.
#
grep '[0-9]\+$' ask1.txt
#
# Ερώτηση 10.
# Εμφανίστε τις γραμμές του αρχείου 'ask1.txt' οι οποίες περιέχουν μεν το πρότυπο 'Pap' αλλά δεν περιέχουν το
# πρότυπο 'Aig'.
#
# Απάντηση: Θα χρησιμοποιήσουμε την εντολή "grep 'Pap' ask1.txt | grep -v 'Aig'".
# Η "grep 'Pap'" θα εντοπίσει τις γραμμές που περιέχουν το 'Pap'.
# Η έξοδος της εντολής θα δοθεί ως είσοδος για την "grep -v 'Aig'" μέσω του pipe '|'.
# Το όρισμα '-v' αναστρέφει την αναζήτηση εμφανίζοντας τις γραμμές που δεν περιέχουν το 'Aig'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# George Pappas george2 12136 Peristeri -------
#
# Βλέπουμε ότι ενώ στο αρχείο υπάρχουν και άλλα ονόματα που περιέχουν 'Pap',
# δεν εμφανίζονται γιατί στην ίδια γραμμή περιέχεται και το 'Aig'.
#
grep 'Pap' ask1.txt | grep -v 'Aig'
#
# Ερώτηση 11.
# Εμφανίστε τις γραμμές του αρχείου 'ask1.txt' οι οποίες δεν αρχίζουν με 'G' ή 'N' και περιέχουν εν συνεχεία
# (κάπου στα περιεχόμενά τους) τα πρότυπα 'Geo' και 'Per' με αυτή τη σειρά.
#
# Απάντηση: Η εντολή μας είναι η "egrep '^[^GN].*Geo.*Per' ask1.txt".
# Η εντολή 'egrep' λειτουργεί σαν την 'grep' αλλά δέχεται και κανονικές εκφράσεις.
# Το ^[^GN] υποδειλώνει ότι ο πρώτος χαρακτήρας (^) δεν πρέπει να είναι G ή N ([^GN]).
# To .* σημαίνει οποιοσδήποτε συνδυασμός χαρακτήρων που μπορεί να προηγείται ή να ακολουθεί τα 'Geo' & 'Per'.
# Έτσι ψάχνουμε πρώτα το 'Geo' και μετά το 'Per' στην ίδια γραμμή.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# Helen Georgioy helen3 12136 Peristeri 5748456
#
# Είναι η μόνη γραμμή στο αρχείο που δεν ξεκινάει με G ή N και περιέχει τα 'Geo' και 'Per' με αυτή την σειρά.
#
egrep '^[^GN].*Geo.*Per' ask1.txt
#
# Ερώτηση 12.
# Πόσοι χρήστες που το username τους δεν αρχίζει από 'ls1' είναι συνδεδεμένοι στο σύστημα ?
#
# Απάντηση: Εδώ θα χρησιμοποιήσουμε την εντολή "who | grep -v '^ls1' | wc -l".
# Η εντολή 'who' εμφανίζει τους χρήστες που είναι συνδεδεμένοι στο σύστημα και η έξοδος της θα διοχετευτεί στην επόμενη εντολή μέσω του pipe.
# Η εντολή "grep -v '^ls1'" θα ψάξει στους χρήστες που της έδωσε η 'who' αυτούς που δεν (-v) αρχίζουν με 'ls1'
# και θα τους περάσει στην εντολή 'wc' μέσω του pipe.
# Η εντολή 'wc -l' θα τυπώσει πόσους χαρακτήρες 'newline' θα βρει. Δηλαδή μετράμε τους χρήστες άφου κάθε χρήστης θα είναι σε ξεχωριστή γραμμή.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# είναι το 1 (λογικό, αφου γράφω την εργασία από τον προσωπικό μου υπολογιστή).
#
who | grep -v '^ls1' | wc -l
#
# Ερώτηση 13.
# Εμφανίστε όλες τις διεργασίες χρηστών (αλλ/σης) που τρέχουν αυτή τη στιγμή στο σύστημα.
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή 'ps -u $(whoami)'.
# H 'ps' τυπώνει τις διεργασίες που τρέχουν στο σύστημα και με το όρισμα '-u'
# ακολουθούμενο από το όνομα του χρήστη φιλτράρουμε το αποτέλεσμα της.
# Με τo '$(whoami)' δεν χρειάζεται να ξέρουμε το όνομα του χρήστη.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
#	    PID TTY          TIME CMD
#    	363 ?        00:00:00 systemd
#    	364 ?        00:00:00 (sd-pam)
#    	375 pts/1    00:00:00 bash
#   	2616 pts/0    00:00:00 bash
#   	5226 pts/0    00:00:00 ps
#
ps -u $(whoami)
#
# Ερώτηση 14.
# Πόσες διεργασίες χρηστών (αλλ/σης) τρέχουν στο σύστημα και τελειώνει το όνομά τους με 'sh' ?
#
# Απάντηση: Χρησιμοποιούμε την εντολή "ps -u $(whoami) | grep 'sh$' | wc -l".
# Η 'ps -u username |' θα διοχετέυσει την έξοδο της στην "grep 'sh&' |"
# η οποία θα ψάξει τις διεργασίες που τελειώνουν σε 'sh' και θα διοχετέυσει με την σειρά της την έξοδο της στην 'wc'.
# Η 'wc -l' θα μας επιστρέψει τον αριθμό τον διεργασιών που τηρούν τα κριτήρια που θέσαμε.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# 2
#
ps -u $(whoami) | grep 'sh$' | wc -l
#
# Ερώτηση 15.
# Ποιες διεργασίες (πάσης μορφής) τρέχουν αυτή τη στιγμή από το λογαριασμό του διαχειριστή ?
#
# Απάντηση: Γνωρίζουμε ότι ο διαχειριστής είναι 'root'. Συνεπώς θα χρησιμοποιήσουμε την εντολή 'ps -u root'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
#	    PID TTY          TIME CMD
#      	1 ?        00:00:02 systemd
#      	2 ?        00:00:00 init-systemd(Ub
#      	9 ?        00:00:00 init
#     	51 ?        00:00:39 systemd-journal
#     	77 ?        00:00:00 systemd-udevd
#    	147 ?        00:00:00 cron
#    	155 ?        00:00:00 systemd-logind
#    	158 ?        00:00:00 wsl-pro-service
#    	163 hvc0     00:00:00 agetty
#    	166 tty1     00:00:00 agetty
#    	205 ?        00:00:00 unattended-upgr
#    	275 pts/1    00:00:00 login
#   	2608 ?        00:00:00 SessionLeader
#   	2609 ?        00:00:00 Relay(2616)
#
ps -u root
#
# Ερώτηση 16.
# Πόσα αρχεία του τρέχοντος καταλόγου σας (μόνο του τρέχοντος - όχι και των υποκαταλόγων του) έχουν
# permissions 'r' από τους πάντες, ‘w’ μόνο από τον ιδιοκτήτη, και 'x' από κανέναν ?
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή 'find' με τις εξής παραμέτρους
# 'find .': Θα ψάξει στον τρέχοντα (.) κατάλογο.
# '-maxdepth 1': Θα περιορίσει την αναζήτηση μόνο στον τρέχοντα κατάλογο χωρίς να ψάξει
# μέσα σε υποκαταλόγους.
# '-type f': Θα αναζητήσει μόνο αρχεία.
# '-perm 644': Δηλώνει τα permissions που ψάχνουμε.
# '| wc -l': Μετρά των αριθμό των γραμμών της εξόδου της προηγούμενης εντολής. Δηλαδή απαριθμεί το
# πλήθος των αρχείων που βρήκε η αναζήτηση.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# 15
#
find . -maxdepth 1 -type f -perm 644 | wc -l
#
# Ερώτηση 17.
# Βρείτε τα αρχεία και καταλόγους του καταλόγου /proc που το όνομά τους αποτελείται μόνο από αριθμούς.
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή "find /proc -maxdepth 1 -regex '.*/[0-9]+'".
# Η 'find /proc' αναζητά αρχεία στον κατάλογο '/proc' και μαζί με το όρισμα '-maxdepth 1' δεν θα μπει η αναζήτηση σε υποκαταλόγους.
# Η "-regex '.*/[0-9]+'" είναι μια κανονική έκφραση που αντιστοιχεί σε paths που το όνομα τους τελειώνει με έναν ή
# περισσότερους αριθμούς ([0-9]+), και το .*/ δηλώνει ότι μπορεί να υπάρχει οποιοδήποτε path πριν από τον κατάλογο '/proc'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# /proc/1
# /proc/2
# /proc/9
# /proc/51
# /proc/77
# /proc/140
# /proc/141
# /proc/147
# /proc/148
# /proc/155
# /proc/158
# /proc/163
# /proc/166
# /proc/183
# /proc/205
# /proc/275
# /proc/363
# /proc/364
# /proc/375
# /proc/624
# /proc/2608
# /proc/2609
# /proc/2616
# /proc/6444
#
find /proc -maxdepth 1 -regex '.*/[0-9]+'
#
# Ερώτηση 18.
# Βρείτε και παρουσιάσετε στην οθόνη με πλήρεις πληροφορίες όλα τα αρχεία με όνομα που αρχίζει από tty και
# βρίσκονται στον κατάλογο /dev.
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή "find /dev -maxdepth 1 -name 'tty*' -exec ls-l {} \;"
# Αναλυτικότερα, η 'find /dev' θα ψάξει στον κατάλογο '/dev' και με το όρισμα '-maxdepth 1' δεν θα αναζητήσει σε υποκαταλόγους.
# Με το "-name 'tty*'" δηλώνουμε ότι ψάχνουμε αρχεία που το όνομα τους ξεκινάει με 'tty' και έπειτα
# δηλωνουμε ότι μπορεί να ακολουθεί οτιδήποτε με το '*'.
# Η '-exec ls -l' θα εκτελεί την εντολή 'ls -l' (η οποία εμφανίζει αρχεία με πλήρεις πληροφορίες) για κάθε αρχείο που βρέθηκε.
# Το '{}' είναι πράξη αποθήκευσης των συμβολοσειρών που ταιριάξανε
# και το '\;' είναι το τελικό όρισμα που απαιτεί η '-exec' για την λειτουργία της.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# crw-rw---- 1 root dialout 4, 67 Nov 12 12:25 /dev/ttyS3
# crw-rw---- 1 root dialout 4, 66 Nov 12 12:25 /dev/ttyS2
# crw-rw---- 1 root dialout 4, 65 Nov 12 12:25 /dev/ttyS1
# crw-rw---- 1 root dialout 4, 64 Nov 12 12:25 /dev/ttyS0
# crw--w---- 1 root tty 4, 63 Nov 12 12:25 /dev/tty63
# crw--w---- 1 root tty 4, 62 Nov 12 12:25 /dev/tty62
# crw--w---- 1 root tty 4, 61 Nov 12 12:25 /dev/tty61
# crw--w---- 1 root tty 4, 60 Nov 12 12:25 /dev/tty60
# crw--w---- 1 root tty 4, 59 Nov 12 12:25 /dev/tty59
# crw--w---- 1 root tty 4, 58 Nov 12 12:25 /dev/tty58
# crw--w---- 1 root tty 4, 57 Nov 12 12:25 /dev/tty57
# crw--w---- 1 root tty 4, 56 Nov 12 12:25 /dev/tty56
# crw--w---- 1 root tty 4, 55 Nov 12 12:25 /dev/tty55
# crw--w---- 1 root tty 4, 54 Nov 12 12:25 /dev/tty54
# crw--w---- 1 root tty 4, 53 Nov 12 12:25 /dev/tty53
# crw--w---- 1 root tty 4, 52 Nov 12 12:25 /dev/tty52
# crw--w---- 1 root tty 4, 51 Nov 12 12:25 /dev/tty51
# crw--w---- 1 root tty 4, 50 Nov 12 12:25 /dev/tty50
# crw--w---- 1 root tty 4, 49 Nov 12 12:25 /dev/tty49
# crw--w---- 1 root tty 4, 48 Nov 12 12:25 /dev/tty48
# crw--w---- 1 root tty 4, 47 Nov 12 12:25 /dev/tty47
# crw--w---- 1 root tty 4, 46 Nov 12 12:25 /dev/tty46
# crw--w---- 1 root tty 4, 45 Nov 12 12:25 /dev/tty45
# crw--w---- 1 root tty 4, 44 Nov 12 12:25 /dev/tty44
# crw--w---- 1 root tty 4, 43 Nov 12 12:25 /dev/tty43
# crw--w---- 1 root tty 4, 42 Nov 12 12:25 /dev/tty42
# crw--w---- 1 root tty 4, 41 Nov 12 12:25 /dev/tty41
# crw--w---- 1 root tty 4, 40 Nov 12 12:25 /dev/tty40
# crw--w---- 1 root tty 4, 39 Nov 12 12:25 /dev/tty39
# crw--w---- 1 root tty 4, 38 Nov 12 12:25 /dev/tty38
# crw--w---- 1 root tty 4, 37 Nov 12 12:25 /dev/tty37
# crw--w---- 1 root tty 4, 36 Nov 12 12:25 /dev/tty36
# crw--w---- 1 root tty 4, 35 Nov 12 12:25 /dev/tty35
# crw--w---- 1 root tty 4, 34 Nov 12 12:25 /dev/tty34
# crw--w---- 1 root tty 4, 33 Nov 12 12:25 /dev/tty33
# crw--w---- 1 root tty 4, 32 Nov 12 12:25 /dev/tty32
# crw--w---- 1 root tty 4, 31 Nov 12 12:25 /dev/tty31
# crw--w---- 1 root tty 4, 30 Nov 12 12:25 /dev/tty30
# crw--w---- 1 root tty 4, 29 Nov 12 12:25 /dev/tty29
# crw--w---- 1 root tty 4, 28 Nov 12 12:25 /dev/tty28
# crw--w---- 1 root tty 4, 27 Nov 12 12:25 /dev/tty27
# crw--w---- 1 root tty 4, 26 Nov 12 12:25 /dev/tty26
# crw--w---- 1 root tty 4, 25 Nov 12 12:25 /dev/tty25
# crw--w---- 1 root tty 4, 24 Nov 12 12:25 /dev/tty24
# crw--w---- 1 root tty 4, 23 Nov 12 12:25 /dev/tty23
# crw--w---- 1 root tty 4, 22 Nov 12 12:25 /dev/tty22
# crw--w---- 1 root tty 4, 21 Nov 12 12:25 /dev/tty21
# crw--w---- 1 root tty 4, 20 Nov 12 12:25 /dev/tty20
# crw--w---- 1 root tty 4, 19 Nov 12 12:25 /dev/tty19
# crw--w---- 1 root tty 4, 18 Nov 12 12:25 /dev/tty18
# crw--w---- 1 root tty 4, 17 Nov 12 12:25 /dev/tty17
# crw--w---- 1 root tty 4, 16 Nov 12 12:25 /dev/tty16
# crw--w---- 1 root tty 4, 15 Nov 12 12:25 /dev/tty15
# crw--w---- 1 root tty 4, 14 Nov 12 12:25 /dev/tty14
# crw--w---- 1 root tty 4, 13 Nov 12 12:25 /dev/tty13
# crw--w---- 1 root tty 4, 12 Nov 12 12:25 /dev/tty12
# crw--w---- 1 root tty 4, 11 Nov 12 12:25 /dev/tty11
# crw--w---- 1 root tty 4, 10 Nov 12 12:25 /dev/tty10
# crw--w---- 1 root tty 4, 9 Nov 12 12:25 /dev/tty9
# crw--w---- 1 root tty 4, 8 Nov 12 12:25 /dev/tty8
# crw--w---- 1 root tty 4, 7 Nov 12 12:25 /dev/tty7
# crw--w---- 1 root tty 4, 6 Nov 12 12:25 /dev/tty6
# crw--w---- 1 root tty 4, 5 Nov 12 12:25 /dev/tty5
# crw--w---- 1 root tty 4, 4 Nov 12 12:25 /dev/tty4
# crw--w---- 1 root tty 4, 3 Nov 12 12:25 /dev/tty3
# crw--w---- 1 root tty 4, 2 Nov 12 12:25 /dev/tty2
# crw--w---- 1 root tty 4, 1 Nov 12 12:25 /dev/tty1
# crw--w---- 1 root tty 4, 0 Nov 12 12:25 /dev/tty0
# crw-rw-rw- 1 root tty 5, 0 Nov 12 12:25 /dev/tty
#
find /dev -maxdepth 1 -name 'tty*' -exec ls -l {} \;
#
# Ερώτηση 19.
# Ταξινομήστε τα περιεχόμενα του αρχείου 'ask1.txt' ως προς το username σε φθίνουσα σειρά.
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή 'sort' η οποία χρησιμοποιείται για ταξινόμηση.
# Το όρισμα '-k1' δηλώνει ότι θέλουμε να ταξινομήσουμε με βάση την πρώτη στήλη στην οποία έχουμε
# σε όλες τις γραμμές του αρχείου τα usernames.
# Με το '-r' ορίζω την φθίνουσα σειρά ταξινόμησης.
# Τέλος δηλώνω το αρχείο που θέλω να ταξινομήσω 'ask1.txt'.
# Άρα η εντολή γίνεται 'sort -k1 -r ask1.txt'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# Vasilis Mamalis vas32 12345 Dafni 9738383
# Nick Pappas nick4 11223 Aigaleo 5324123
# Nick Nikolaoy nick23 12232 Aigaleo 5314555
# Helen Thanoy helen36 11132 Peristeri 9718345
# Helen Ioannoy helen367 13222 Athens -------
# Helen Georgioy helen3 12136 Peristeri 5748456
# George Pappas george2 12136 Peristeri -------
# George Georgioy george583 11132 Athens -------
#
sort -k1 -r ask1.txt
#
# Ερώτηση 20.
# Ταξινομήστε τα '.c' αρχεία του καταλόγου στον οποίον δουλεύετε ως προς το μέγεθός τους.
#
# Απάντηση: Θα χρησιμοποιήσω την εντολή 'ls' με τα ορίσματα:
# Το '-S' ταξινομεί με βάση το μέγεθος by default σε φθίνουσα σειρά.
# Για να ταξινομήσουμε σε αύξουσα σειρά θα προσθέσουμε και το όρισμα '-r'.
# Με το '-l' εμφανίζουμε το μέγεθος των αρχείων, και
# με το *.c δηλώνουμε ότι θέλουμε να ταξινομήσουμε και εμφανίσουμε μόνο τα αρχεία που τελειώνουν σε '.c'.
# Μπορούμε να παραλείψουμε το '-l' αλλά εδώ το προσθέτω για την επαλήθευση της ταξινόμησης.
# Συνεπώς η εντολή γίνεται: 'ls -lSr *.c'.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# -rw-r--r-- 1 robert robert  343 Sep 10  2023 02_4.c
# -rw-r--r-- 1 robert robert 1231 Oct 17  2023 pinakes1.c
# -rw-r--r-- 1 robert robert 2357 Oct 21  2023 pinakes2_1c.c
#
# όπου η 5η στήλη είναι το μέγεθος σε bytes.
#
ls -lSr *.c
#
# Ερώτηση 21.
# Ταξινομήστε τα αρχεία του λογαριασμού σας με permissions 755 ως προς το μέγεθός τους
#
# Απάντηση: Θα χρησιμοποιήσουμε την εντολή 'find' με τα παρακάτω ορίσματα:
# '~': Αν δεν είμαστε στον αρχικό κατάλογο το '~' θα σιγουρέψει ότι η αναζήτηση θα ξεκινήσει από εκεί.
# 'type -f': Επιλέγει μόνο αρχεία και όχι καταλόγους.
# '-perm 755': Εντοπίζει αρχεία με τα ζητούμενα δικαιώματα.
# '-exec ls -lS {} +': Θα εμφανίσει πλήρεις πληροφορίες για τα αρχεία (-l) και τα ταξινομεί με βάση το μέγεθος τους (-S).
# Το '{}' είναι πράξη ομαδοποίησης
# Το '+' "λέει" στο find να περάσει ομαδοποιημένα όλα τα αρχεία που ταίριαξαν, στην εντολή 'exec ls'.
#
# Άρα η εντολή ολοκληρωμένη είναι: 'find ~ -type f -perm 755 -exec ls -lS {} +'
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# -rwxr-xr-x 1 robert robert 98422312 Oct 31 07:57 /home/robert/.vscode-server/bin/
# -rwxr-xr-x 1 robert robert 15865876 Oct 30 04:18 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert  5128112 Jun 26  2023 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert  1429463 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert   554072 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert   525320 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert   264632 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert   264632 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert   190040 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert    77984 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert    43968 Oct 30 04:18 /home/robert/.vscode-server/bin/[...]
# -rwxr-xr-x 1 robert robert    14304 Oct 30 04:17 /home/robert/.vscode-server/bin/[...]
# [...]
#
find ~ -type f -perm 755 -exec ls -lS {} +
#
# Ερώτηση 22.
# Ταξινομήστε όλα τα περιεχόμενα του καταλόγου /dev κατά πρώτον ως προς τον owner και κατά δεύτερον ως
# προς το group και αποθηκεύστε το output στο αρχείο 'binfiles.txt'.
#
# Απάντηση: Θα χρησιμοποιήσω τις εντολές 'ls' και 'sort' και θα διοχετεύσω την έξοδο τους στο ζητούμενο αρχείο.
# Η εντολή είναι 'ls -l /dev | sort -k3 -k4 > binfiles.txt'.
# 'ls -l /dev': Θα εμφανίσει τα περιεχόμενα του καταλόγου '/dev' με πλήρεις πληροφορίες.
# '| sort -k3 -k4': Θα ταξινομήσει την έξοδο της προηγούμενης εντολής αρχικά κατά την 3η στήλη (-k3),
# δηλαδή τον ιδιοκτήτη, και έπειτα κατά την 4η στήλη (-k4), δηλαδή το group.
# '> binfiles.txt': Ανακατευθύνει την έξοδο στο ζητούμενο αρχείο.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# crw-rw---- 1 root dialout   4,  64 Nov 12 17:02 ttyS0
# crw-rw---- 1 root dialout   4,  65 Nov 12 17:02 ttyS1
# crw-rw---- 1 root dialout   4,  66 Nov 12 17:02 ttyS2
# crw-rw---- 1 root dialout   4,  67 Nov 12 17:02 ttyS3
# brw-rw---- 1 root disk      1,   0 Nov 12 17:02 ram0
# brw-rw---- 1 root disk      1,   1 Nov 12 17:02 ram1
# brw-rw---- 1 root disk      1,   2 Nov 12 17:02 ram2
# [...]
# crw-rw---- 1 root disk     21,   1 Nov 12 17:02 sg1
# crw-rw---- 1 root disk     21,   2 Nov 12 17:02 sg2
# crw-r----- 1 root kmem      1,   1 Nov 12 17:02 mem
# crw-r----- 1 root kmem     10, 144 Nov 12 17:02 nvram
# crw-rw---- 1 root kvm      10, 232 Nov 12 17:02 kvm
# crw-rw---- 1 root kvm      10, 238 Nov 12 17:02 vhost-net
# drwxr-xr-x 2 root root           0 Nov 12 17:02 hugepages
# drwxr-xr-x 2 root root           0 Nov 12 17:02 pts
# lrwxrwxrwx 1 root root           4 Nov 12 17:02 ptp_hyperv -> ptp0
# [...]
#
# Με την εντολή 'cat binfiles.txt' βλέπουμε τα περιεχόμενα του ζητούμενου αρχείου.
#
ls -l /dev | sort -k3 -k4 > binfiles.txt
#
# Ερώτηση 23.
# Φτιάξτε ένα αρχείο που θα περιέχει πληροφορίες μόνο για τους συνδεδεμένους χρήστες που το username
# τους αρχίζει από 'ls1', ταξινομημένο ως προς την ημερομηνία και ώρα σύνδεσή τους
#
# Απάντηση: Θα χρησιμοποιήσουμε τις εντολες 
# 'who': Εμφανίζει όλους τους συνδεδεμένους χρήστες.
# "grep '^ls1'": Θα φιλτράρει τους χρήστες με όνομα που ξεκινάει (^) με 'ls1'.
# 'sort -k3 -k4': Θα ταξινομήσει την έξοδο της 'grep' ως προς την
# ημερομηνία σύνδεσης (τρίτη στήλη -k3) και την ώρα σύνδεσης (τέταρτη στήλη -k4).
# '> ls1_connected_users.txt': Θα διοχετεύσει (>) την έξοδο της 'sort' στο επιθυμητό αρχείο.
#
# Άρα ολόκληρη η εντολή θα είναι "who | grep '^ls1' | sort -k3 -k4 > ls1_connected_users.txt"
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# Το αρχείο δημιουργείται και δεν περιέχει τίποτα γιατί δεν υπάρχουν χρήστες με όνομα που ξεκινάει με 'ls1' στον υπολογιστή μου.
#
who | grep '^ls1' | sort -k3 -k4 > ls1_connected_users.txt
#
# Ερώτηση 24.
# Αλλάξτε στο αρχείο 'ask1.txt' το όνομα 'Nick' (όπου συναντάται) σε 'Nickolaos'.
#
# Απάντηση: Θα χρησιμοποιήσουμε την εντολή 'sed' (stream editor).
# Η εντολή ολοκληρωμένη θα είναι 'sed -i 's/Nick/Nickolaos/g' ask1.txt'.
# Το όρισμα '-i' επιτρέπει την επεξεργασία μέσα στο ήδη υπάρχων αρχείο.
# Με το να το παραλείψουμε μπορούμε να δούμε πως θα είναι το αρχείο μετά την αντικατάσταση χωρίς να το αποθηκεύσουμε.
# Το συντακτικό της εντολής είναι 's/old/new/g'. Άρα old = Nick και new = Nickolaos.
# Τέλος, ask1.txt το αρχείο στο οποίο θέλουμε να κάνουμε την αντικατάσταση.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# George Pappas george2 12136 Peristeri -------
# Nickolaos Nikolaoy nick23 12232 Aigaleo 5314555
# George Georgioy george583 11132 Athens -------
# Helen Georgioy helen3 12136 Peristeri 5748456
# Nickolaos Pappas nick4 11223 Aigaleo 5324123
# Helen Ioannoy helen367 13222 Athens -------
# Helen Thanoy helen36 11132 Peristeri 9718345
# Vasilis Mamalis vas32 12345 Dafni 9738383
#
sed -i 's/Nick/Nickolaos/g' ask1.txt
#
# Ερώτηση 25.
# Έστω τα ακόλουθα items του file system με protection strings: (α) '-rwxr-x--x', (β) 'drwxr-xr-- ' και (γ) 'drwx--x--x.
# Εξηγείστε τι είδους items είναι και ποια τα δικαιώματα πρόσβασης user, group και others σε αυτά.
#
# Απάντηση:
# (α) '-rwxr-x--x':
# 	Τύπος: Ο πρώτος χαρακτήρας είναι '-' άρα είναι αρχείο.
#	User(rwx): O ιδιοκτήτης έχει δικαίωμα ανάγνωσης (r), εγγραφής (w) και εκτέλεσης (x).
#	Group(r-x): Τα μέλη του group έχουν δικαίωμα ανάγνωσης (r) και εκτέλεσης (x), αλλά όχι εγγραφής.
#	Others(--x): Οι υπόλοιποι χρήστες έχουν μόνο δικαίωμα εκτέλεσης (x), χωρίς δικαιώματα εγγραφής ή ανάγνωσης.
#
# (β) 'drwxr-xr--':
#	Τύπος: Ο πρώτος χαρακτήρας είναι 'd', άρα είναι κατάλογος.
#	User(rwx): Ο ιδιοκτήτης έχει δικαίωμα ανάγνωσης (r), εγγραφής (w) και εκτέλεσης (x).
#	Group(r-x): Τα μέλη του group έχουν δικαίωμα ανάγνωσης (r) και εκτέλεσης (x) αλλά όχι εγγραφής.
#	Others(r--): Οι υπόλοιποι χρήστες έχουν μόνο δικαίωμα ανάγνωσης (r).
#
# (γ) 'drwx--x--x':
#	Τύπος: Ο πρώτος χαρακτήρας 'd', άρα πρόκειται για κατάλογο.
#	User(rwx): Ο ιδιοκτήτης έχει δικαίωμα ανάγνωσης (r), εγγραφής (w) και εκτέλεσης (x).
#	Group(--x): Τα μέλη του group έχουν μόνο δικαίωμα εκτέλεσης (x).
#	Others(--x): Οι υπόλοιποι χρήστες έχουν επίσης μόνο δικαίωμα εκτέλεσης (x).
#
# Ερώτηση 26.
# Αλλάξτε τα permissions όλων των αρχείων του καταλόγου 'testdir1' έτσι ώστε να έχουν δικαίωμα εκτέλεσης και
# εγγραφής μόνο ο ιδιοκτήτης, ενώ δικαίωμα ανάγνωσης να έχουν όλοι.
#
# Απάντηση: Θα χρησιμοποιήσουμε την εντολή 'chmod'. Η εντολή αυτή χρησιμοποιείται για την επεξεργασία δικαιωμάτων
# αρχείων και καταλόγων.
# Η εντολή θα έχει την μορφή 'chmod u=rwx,g=r,o=r testdir1/*'.
# Πιο αναλυτικά το 'u=rwx' δίνει δικαιώματα ανάγνωσης, εγγραφής και εκτέλεσης στον ιδιοκτήτη και
# τα 'g=r' και 'o=r' δίνουν μόνο δικαίωμα ανάγνωσης στα μέλη του group και στους υπόλοιπους χρήστες αντίστοιχα.
# Το 'testdir1/*' δηλώνει ότι αυτή η εντολή θέλουμε να επηρεάσει όλα τα περιεχόμενα του 'testdir1'.
#
# Θα μπορούσαμε να γράψουμε την εντολή και ως 'chmod 744 testdir1/*' αλλά τον προηγούμενο τρόπο τον βρίσκω
# πιο φιλικό στην χρήση.
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# -rwxr--r-- 1 robert robert 353 Nov 11 21:12 ask1link
#
chmod u=rwx,g=r,o=r testdir1/*
#
# Ερώτηση 27.
# Δημιουργήστε έναν νέο χρήστη στο σύστημά σας με username 'myfriend'. Αλλάξτε στη συνέχεια τον ιδιοκτήτη
# του αρχείου 'ask1.txt' σε 'myfriend' και μετακινήστε το στο working directory του.
#
# Απάντηση: Για να δημιουργήσουμε τον νέο χρήστη θα χρησιμοποιήσουμε την εντολή 'sudo useradd -m myfriend'.
# Η 'useradd' δημιουργεί νέους χρήστες και χρειάζεται αυξημένα δικαιώματα τα οποία τα παραχωρούμε με το 'sudo'.
# Το όρισμα '-m' θα δημιουργήσει τον αρχικό κατάλογο του χρήστη στο '/home/myfriend'.
#
# Για να αλλάξουμε τον ιδιοκτήτη του 'ask1.txt' θα κάνουμε 'sudo chown myfriend ask1.txt'.
# Η 'chown' (change ownership) χρησιμοποιείται για να αλλάξει τον ιδιοκτήτη (owner) ή/ και
# την ομάδα (group) ενός αρχείου ή καταλόγου.
# Ορίζουμε ως τον νέο ιδιοκτήτη του 'ask1.txt', τον χρήστη που δημιουργήσαμε 'myfriend'.
# Πάλι θα χρειαστεί να χρησιμοποιήσουμε το 'sudo'.
# Τέλος, για να μετακινήσουμε το αρχείο στο directory του νέου ιδιοκτήτη,
# θα χρησιμοποιήσουμε την εντολή 'mv' (move) με τα αυξημένα δικαιώματα του 'sudo':
# 'sudo mv ask1.txt /home/myfriend/'
#
# Αποτέλεσμα εκτέλεσης εντολής:
#
# -rw-r--r-- 1 myfriend myfriend 353 Nov 20 20:00 ask1.txt
#
sudo useradd -m myfriend
sudo chown myfriend ask1.txt
sudo mv ask1.txt /home/myfriend/
#
# Ερώτηση 28.
# Δημιουργείστε τα αρχεία f1, f2, f3, f4, f5, f6 ,f7 με τα εξής δικαιώματα:
# f1, 757
# f2, 313
# f3, 010
# f4, 642
# f5, 551
# f6, 133
# f7, 111
# Με χρήση της εντολής ls –l και διοχετεύοντας τα αποτελέσματά της στην εντολή egrep, βρείτε στη συνέχεια τα
# αρχεία όπου:
# a. To group έχει δικαιώματα r-x.
# b. Ο user και οι others έχουν ακριβώς τα ίδια δικαιώματα
# c. Ο user, το group και οι others έχουν τα ίδια δικαιώματα για write
# d. Ο user, το group και οι others έχουν τα ίδια δικαιώματα για write και execute
# e. To group και οι others έχουν τα ίδια δικαιώματα για read και execute
#
# Απάντηση: Θα δημιουργήσω τα αρχεία με την εντολή 'touch f1 f2 f3 f4 f5 f6 f7'.
# Θα δώσω τα ζητούμενα δικαιώματα με την εντολή 'chmod' που έχουμε δει και σε προηγούμενο
# ερώτημα.
#
mkdir er28
cd er28
touch f1 f2 f3 f4 f5 f6 f7
chmod 757 f1
chmod 313 f2
chmod 010 f3
chmod 642 f4
chmod 551 f5
chmod 133 f6
chmod 111 f7
cd ..
#
# a)
ls -l er28 | grep -e '-...r-x...'
# b)
ls -l er28 | grep -e '-rwx...rwx'
# c)
ls -l er28 | grep -e '-.w..w..w.'
# d)
ls -l er28 | grep -e '-.wx.wx.wx'
# e)
ls -l er28 | grep -e '-...r.xr.x'
